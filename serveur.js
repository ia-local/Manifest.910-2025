const { Telegraf, Markup } = require('telegraf');
const Groq = require('groq-sdk');
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });
const fs = require('fs');
const path = require('path');
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
require('dotenv').config();

// --- Nouvelle URL de base pour l'application web ---
const BASE_WEB_APP_URL = 'https://ia-local.github.io/Manifest.910-2025';

// Initialisation des variables de r√¥les (avec valeurs par d√©faut pour la robustesse)
let rolesSystem = { system: { content: "Vous √™tes un assistant IA g√©n√©raliste." } };
let rolesAssistant = { assistant: { content: "Je suis un assistant IA utile et informatif." } };
let rolesUser = { user: { content: "Je suis un utilisateur." } };

// --- Chargement des fichiers JSON de r√¥les Groq ---
try {
    const rolesSystemPath = path.join(__dirname, 'role', 'roles-system.json');
    const rolesAssistantPath = path.join(__dirname, 'role', 'roles-assistant.json');
    const rolesUserPath = path.join(__dirname, 'role', 'roles-user.json');

    rolesSystem = JSON.parse(fs.readFileSync(rolesSystemPath, 'utf8'));
    rolesAssistant = JSON.parse(fs.readFileSync(rolesAssistantPath, 'utf8'));
    rolesUser = JSON.parse(fs.readFileSync(rolesUserPath, 'utf8'));

    // V√©rification basique de la structure apr√®s chargement
    if (!rolesSystem.system || typeof rolesSystem.system.content !== 'string') {
        console.warn('roles-system.json a une structure inattendue. Assurez-vous qu\'il contient `{ "system": { "content": "..." } }`.');
        rolesSystem = { system: { content: "Vous √™tes l'IA d'un mouvement citoyen." } };
    }
    if (!rolesAssistant.assistant || typeof rolesAssistant.assistant.content !== 'string') {
        console.warn('roles-assistant.json a une structure inattendue. Assurez-vous qu\'il contient `{ "assistant": { "content": "..." } }`.');
        rolesAssistant = { assistant: { content: "Je suis votre assistant pour le mouvement." } };
    }
    if (!rolesUser.user || typeof rolesUser.user.content !== 'string') {
        console.warn('roles-user.json a une structure inattendue. Assurez-vous qu\'il contient `{ "user": { "content": "..." } }`.');
        rolesUser = { user: { content: "Je suis un citoyen." } };
    }

} catch (error) {
    console.error('Erreur lors du chargement des fichiers de r√¥les Groq. Assurez-vous que les fichiers existent et sont valides JSON:', error);
    // Les valeurs par d√©faut seront utilis√©es si les fichiers ne peuvent pas √™tre lus
}

// --- Configuration du Serveur Express (pour les stats ou futures APIs bot-sp√©cifiques) ---
const app = express();
const BOT_SERVER_PORT = process.env.BOT_SERVER_PORT || 3001; // Port diff√©rent du serveur Web principal (5007)

app.use(bodyParser.json());
app.use(cors()); // CORS ouvert pour le dev, √† restreindre en production si utilis√© par un frontend s√©par√©

// IMPORTANT : Assurez-vous que le dossier 'data' existe √† la racine de votre script Telegram
// Ex: data/stats.json et data/polls.json
const STATS_FILE = path.join(__dirname, 'data', 'stats.json');
const POLLS_FILE = path.join(__dirname, 'data', 'polls.json'); // Nouveau fichier pour les sondages

// --- Fonctions de lecture/√©criture pour les statistiques et les sondages ---
async function readJsonFile(filePath, defaultValue = {}) {
    try {
        await fs.promises.mkdir(path.dirname(filePath), { recursive: true }); // Cr√©e le dossier si inexistant
        const data = await fs.promises.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.warn(`Le fichier ${filePath} n'existe pas. Cr√©ation d'un fichier vide/par d√©faut.`);
            await fs.promises.writeFile(filePath, JSON.stringify(defaultValue, null, 2), 'utf8');
            return defaultValue;
        }
        console.error(`Erreur de lecture du fichier ${filePath}:`, error);
        return defaultValue;
    }
}

async function writeJsonFile(filePath, data) {
    try {
        await fs.promises.mkdir(path.dirname(filePath), { recursive: true }); // Cr√©e le dossier si inexistant
        await fs.promises.writeFile(filePath, JSON.stringify(data, null, 2), 'utf8');
    } catch (error) {
        console.error(`Erreur d'√©criture du fichier ${filePath}:`, error);
    }
}

// --- Configuration du Bot Telegram ---
// Ajout de { telegram: { webhookReply: false } } pour forcer le long polling

const bot = new Telegraf('7097263805:AAHQeI1swop7WwGSF9wNy77VGrfzcghUYP0', {
    telegram: {
      webhookReply: true,
    },
  });

const ORGANIZER_GROUP_ID = process.env.ORGANIZER_GROUP_ID; // ID du groupe o√π envoyer les sujets/messages importants

// Gestionnaire d'erreurs global pour Telegraf
bot.catch((err, ctx) => {
    console.error(`\n[ERREUR TELEGRAF] Erreur pour l'update ${ctx.update.update_id || 'inconnue'} :`, err);
    if (ctx.chat) {
        ctx.reply('D√©sol√©, une erreur est survenue lors du traitement de votre demande. Les administrateurs ont √©t√© inform√©s.').catch(replyErr => {
            console.error('Erreur lors de l\'envoi du message d\'erreur √† l\'utilisateur:', replyErr);
        });
    }
});


// Fonction utilitaire pour envoyer des messages IA
async function getGroqChatResponse(promptInput, model, systemMessageContent) {
    try {
        const messages = [];
        if (systemMessageContent) {
            messages.push({ role: 'system', content: systemMessageContent });
        }
        messages.push({ role: 'user', content: promptInput });

        const chatCompletion = await groq.chat.completions.create({
            messages: messages,
            model: model,
            temperature: 0.7,
            max_tokens: 2048,
        });
        return chatCompletion.choices[0].message.content;
    } catch (error) {
        console.error(`Erreur lors de la g√©n√©ration de la r√©ponse IA (Groq model: ${model}):`, error);
        return 'Une erreur est survenue lors du traitement de votre demande. Veuillez r√©essayer plus tard.';
    }
}

// --- COMMANDES ET ACTIONS DU BOT TELEGRAM ---

bot.start(async (ctx) => {
    // Si un payload est pr√©sent dans la commande /start (deep linking)
    const payload = ctx.startPayload;
    let welcomeMessage = `Bonjour citoyen(ne) ! üëã\n\nBienvenue dans l'espace de mobilisation pour la **Gr√®ve G√©n√©rale du 10 Septembre 2025** et la **Justice Sociale** ! Je suis votre assistant pour le mouvement.`;

    if (payload) {
        welcomeMessage += `\n\nVous √™tes arriv√© via un lien d'invitation : \`${payload}\`. Merci de rejoindre notre cause !`;
        // Ici, vous pouvez ajouter une logique sp√©cifique en fonction du payload
        // ex: enregistrer l'utilisateur comme invit√© par 'payload'
    }

    welcomeMessage += `\n\nComment puis-je vous aider √† vous informer et √† vous engager ?`;

    const inlineKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìú Le Manifeste', 'show_manifesto')],
        [Markup.button.callback('üó≥Ô∏è S\'engager (RIC/P√©titions)', 'engage_menu')],
        [Markup.button.callback('‚úä Infos Gr√®ve 10 Sept.', 'strike_info')],
        [Markup.button.callback('üìä Participer aux Sondages', 'show_polls')],
        [Markup.button.url('üåê Visiter le site web du Mouvement', `${BASE_WEB_APP_URL}`)], // LIEN MIS √Ä JOUR
        [Markup.button.callback('‚ùì Aide & Commandes', 'show_help')]
    ]);

    await ctx.replyWithMarkdown(welcomeMessage, inlineKeyboard);
});

// Menu d'engagement (RIC/P√©titions)
bot.action('engage_menu', async (ctx) => {
    await ctx.answerCbQuery();
    const engageMessage = `Choisissez comment vous souhaitez vous engager :`;
    const inlineKeyboard = Markup.inlineKeyboard([
        [Markup.button.url('‚úÖ Signer la P√©tition RIC', `${BASE_WEB_APP_URL}/pages/ric.html`)], // LIEN MIS √Ä JOUR
        [Markup.button.url('‚öñÔ∏è Soutenir la Proc√©dure de Destitution', `${BASE_WEB_APP_URL}/pages/destitution-article68.html`)], // LIEN MIS √Ä JOUR
        [Markup.button.url('üí¨ Jugement Majoritaire & Justice Sociale', `${BASE_WEB_APP_URL}/pages/jugement-majoritaire.html`)], // LIEN MIS √Ä JOUR
        [Markup.button.callback('üîô Retour au menu principal', 'start_menu')]
    ]);
    await ctx.reply(engageMessage, inlineKeyboard);
});

// Action pour retourner au menu principal (pour le bouton "Retour")
bot.action('start_menu', async (ctx) => {
    await ctx.answerCbQuery();
    await bot.start(ctx); // Simule la commande /start pour r√©afficher le menu principal
});

bot.action('show_manifesto', async (ctx) => {
    await ctx.answerCbQuery();
    const manifestoContent = `**Extrait du Manifeste 'Le 10 Septembre' :**
Notre mouvement est n√© de la conviction que la R√©publique doit retrouver ses valeurs de justice sociale, de d√©mocratie directe et de transparence. Nous exigeons :
\n1.  **L'instauration du R√©f√©rendum d'Initiative Citoyenne (RIC)** dans toutes ses formes (l√©gislatif, abrogatoire, constituant, r√©vocatoire).
\n2.  **La mise en ≈ìuvre de la proc√©dure de destitution** des √©lus, notamment pr√©sidentielle, en cas de manquement grave √† leurs devoirs, conform√©ment √† l'Article 68 de la Constitution.
\n3.  **Une refonte du syst√®me fiscal** pour une plus grande √©quit√© et une contribution juste de chacun.
\n4.  **Une v√©ritable transition √©cologique** qui ne laisse personne de c√¥t√©, financ√©e par la justice fiscale.
\n5.  **La fin de l'impunit√©** et la responsabilisation des √©lites √©conomiques et politiques.

\n\nPour lire le manifeste complet et toutes nos propositions, visitez notre site web : [${BASE_WEB_APP_URL}](${BASE_WEB_APP_URL})
`;
    await ctx.replyWithMarkdown(manifestoContent);
});

bot.action('strike_info', async (ctx) => {
    await ctx.answerCbQuery();
    const strikeInfo = `**Informations Cl√©s sur la Gr√®ve G√©n√©rale du 10 Septembre 2025 :**
\nNous appelons √† une mobilisation massive dans toute la France.
\n* **Date :** Mercredi 10 Septembre 2025.
\n* **Type d'action :** Gr√®ve G√©n√©rale interprofessionnelle et manifestations citoyennes.
\n* **Objectifs :** Exiger l'instauration du RIC, la justice fiscale et sociale, la responsabilisation des √©lus.
\n\nDes points de rassemblement sp√©cifiques seront communiqu√©s dans les semaines √† venir. Restez connect√©s !
\n\nPartagez l'information et organisez-vous localement ! Votre participation est essentielle.
`;
    await ctx.replyWithMarkdown(strikeInfo);
});

bot.action('show_help', async (ctx) => {
    await ctx.answerCbQuery();
    const helpMessage = `Voici les commandes que vous pouvez utiliser :
/start - Revenir au menu principal et message de bienvenue
/manifeste - Lire un extrait de notre manifeste
/ric - Tout savoir sur le R√©f√©rendum d'Initiative Citoyenne
/destitution - Comprendre la proc√©dure de destitution (Art. 68)
/greve - Infos pratiques sur la Gr√®ve du 10 Septembre 2025
/sondage - Participer aux sondages d'opinion du mouvement
/petition - Acc√©der aux p√©titions en cours sur notre site
/inviter - Inviter des amis √† rejoindre le bot et le mouvement
/contact [votre message] - Envoyer un message aux organisateurs
/stats - Afficher les statistiques d'utilisation du bot
/aboutai - En savoir plus sur mon fonctionnement
/help - Afficher ce message d'aide
`;
    await ctx.reply(helpMessage);
});

bot.action('about_ai', async (ctx) => { // Garder l'action pour le bouton
    await ctx.answerCbQuery();
    const aboutAIMessage = `Je suis un assistant IA bas√© sur les mod√®les de langage de Groq, entra√Æn√© pour vous informer et vous aider √† vous engager dans le mouvement 'Le 10 Septembre'. Mon r√¥le est de faciliter la communication et l'acc√®s √† l'information sur nos objectifs de justice sociale et de d√©mocratie.`;
    await ctx.reply(aboutAIMessage);
});

// Nouvelle commande : /manifeste
bot.command('manifeste', async (ctx) => {
    await ctx.replyWithMarkdown(
        `**Le Manifeste 'Le 10 Septembre' :**
Nous sommes le peuple, et nous exigeons une R√©publique juste et transparente. Nos piliers :
\n1.  **RIC (R√©f√©rendum d'Initiative Citoyenne) :** Le pouvoir au peuple pour initier, abroger, amender des lois, et r√©voquer des √©lus.
\n2.  **Justice Sociale :** √âgalit√© des chances, redistribution √©quitable des richesses, fin des privil√®ges.
\n3.  **Responsabilisation Politique :** Application stricte de l'Article 68 de la Constitution pour la destitution des √©lus coupables de manquements graves.
\n4.  **√âcologie Solidaire :** Une transition √©cologique juste, finan√ß√©e par ceux qui polluent le plus.
\n5.  **Transparence et Int√©grit√© :** Lutte implacable contre la corruption et les conflits d'int√©r√™ts.

\n\nPour une lecture compl√®te : [${BASE_WEB_APP_URL}](${BASE_WEB_APP_URL})
    `);
});

// Nouvelle commande : /ric
bot.command('ric', async (ctx) => {
    await ctx.replyWithMarkdown(
        `**Le R√©f√©rendum d'Initiative Citoyenne (RIC) : Le C≈ìur de notre D√©mocratie !**
Le RIC est l'outil essentiel pour redonner le pouvoir aux citoyens. Il se d√©cline en plusieurs formes :
\n* **RIC L√©gislatif :** Proposer et voter des lois.
\n* **RIC Abrogatoire :** Annuler une loi existante.
\n* **RIC Constituant :** Modifier la Constitution.
\n* **RIC R√©vocatoire :** Destituer un √©lu.

\n\nC'est la garantie que notre voix sera directement entendue et respect√©e.
\nPlus d'infos et signez la p√©tition : [${BASE_WEB_APP_URL}/pages/ric.html](${BASE_WEB_APP_URL}/pages/ric.html)
    `);
});

// Nouvelle commande : /destitution
bot.command('destitution', async (ctx) => {
    await ctx.replyWithMarkdown(
        `**La Proc√©dure de Destitution : L'Article 68 de la Constitution**
\nL'Article 68 de la Constitution fran√ßaise pr√©voit la possibilit√© de destituer le Pr√©sident de la R√©publique en cas de manquement √† ses devoirs manifestement incompatible avec l'exercice de son mandat.

\n\nNotre mouvement demande une application rigoureuse et transparente de cet article, et la mise en place de m√©canismes citoyens pour initier et suivre cette proc√©dure.
\nD√©couvrez les preuves et l'appel au jugement majoritaire : [${BASE_WEB_APP_URL}/pages/destitution-article68.html](${BASE_WEB_APP_URL}/pages/destitution-article68.html)
    `);
});

// Nouvelle commande : /greve
bot.command('greve', async (ctx) => {
    await ctx.replyWithMarkdown(
        `**Pr√©parons ensemble la Gr√®ve G√©n√©rale du 10 Septembre 2025 !**
\nNous appelons √† une mobilisation historique pour faire entendre nos exigences de justice sociale et de d√©mocratie.
\n* **Participez !** Que vous soyez salari√©, √©tudiant, retrait√©, solidaire, votre pr√©sence est cruciale.
\n* **Organisez-vous !** Cr√©ez des collectifs locaux, parlez-en autour de vous.
\n* **Informez-vous !** Suivez nos annonces pour les points de rassemblement et les actions sp√©cifiques.

\n\nEnsemble, nous pouvons faire changer les choses !
    `);
});

// Nouvelle commande : /sondage
bot.command('sondage', async (ctx) => {
    const polls = await readJsonFile(POLLS_FILE, []); // Lit les sondages existants

    if (polls.length === 0) {
        await ctx.reply('Aucun sondage actif pour le moment. Restez √† l\'√©coute !');
        return;
    }

    let message = 'üìä **Sondages Actifs :**\n\n';
    const inlineKeyboardButtons = [];

    polls.forEach((poll, index) => {
        message += `*${index + 1}. ${poll.question}*\n`;
        // Afficher les options sans les r√©ponses pour le vote
        poll.options.forEach(option => {
            message += `   - ${option.text}\n`;
        });
        message += `   (Votez avec /voter${poll.id} [num√©ro_option])\n\n`; // Exemple: /voter1 2
        // Ou utiliser des boutons inline pour chaque option si le sondage est simple
        // inlineKeyboardButtons.push(poll.options.map(option => Markup.button.callback(option.text, `vote_poll_${poll.id}_${option.id}`)));
    });

    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(inlineKeyboardButtons));
});

// Gestionnaire de vote de sondage (exemple simple, √† am√©liorer)
bot.hears(/^\/voter(\d+) (\d+)$/, async (ctx) => {
    const pollId = ctx.match[1];
    const optionNumber = parseInt(ctx.match[2], 10);
    const userId = ctx.from.id;

    let polls = await readJsonFile(POLLS_FILE, []);
    const pollIndex = polls.findIndex(p => p.id === pollId);

    if (pollIndex === -1) {
        await ctx.reply('Ce sondage n\'existe pas.');
        return;
    }

    const poll = polls[pollIndex];

    if (poll.votes && poll.votes[userId]) {
        await ctx.reply('Vous avez d√©j√† vot√© pour ce sondage.');
        return;
    }

    if (optionNumber < 1 || optionNumber > poll.options.length) {
        await ctx.reply(`Option invalide. Veuillez choisir un num√©ro entre 1 et ${poll.options.length}.`);
        return;
    }

    // Enregistrer le vote
    if (!poll.votes) {
        poll.votes = {};
    }
    poll.votes[userId] = optionNumber - 1; // Stocke l'index de l'option
    poll.options[optionNumber - 1].count = (poll.options[optionNumber - 1].count || 0) + 1;

    await writeJsonFile(POLLS_FILE, polls);
    await ctx.reply(`Merci pour votre participation au sondage "${poll.question}" !`);
    // Optionnel: Afficher les r√©sultats mis √† jour
    await displayPollResults(ctx, pollId);
});

async function displayPollResults(ctx, pollId) {
    const polls = await readJsonFile(POLLS_FILE, []);
    const poll = polls.find(p => p.id === pollId);

    if (!poll) return;

    let resultsMessage = `üìä **R√©sultats pour "${poll.question}" :**\n\n`;
    const totalVotes = Object.keys(poll.votes || {}).length;

    poll.options.forEach(option => {
        const count = option.count || 0;
        const percentage = totalVotes > 0 ? ((count / totalVotes) * 100).toFixed(1) : 0;
        resultsMessage += `- ${option.text}: ${count} votes (${percentage}%)\n`;
    });
    resultsMessage += `\nTotal des participants : ${totalVotes}`;

    await ctx.replyWithMarkdown(resultsMessage);
}

// Commande (Admin) pour cr√©er un sondage (rudimentaire, √† am√©liorer avec un dialogue)
bot.command('create_poll', async (ctx) => {
    // Basic admin check (e.g., check ctx.from.id against a list of admin IDs)
    const ADMIN_IDS = process.env.TELEGRAM_ADMIN_IDS ? process.env.TELEGRAM_ADMIN_IDS.split(',').map(Number) : [];
    if (!ADMIN_IDS.includes(ctx.from.id)) {
        await ctx.reply('Vous n\'√™tes pas autoris√© √† cr√©er des sondages.');
        return;
    }
    
    const args = ctx.message.text.split(' ').slice(1).join(' ').split('|');
    if (args.length < 2) {
        await ctx.reply('Usage: /create_poll "Question du sondage"|"Option 1"|"Option 2"|..."');
        return;
    }

    const question = args[0].trim();
    const options = args.slice(1).map(opt => ({ text: opt.trim(), count: 0 }));

    if (options.length < 2) {
        await ctx.reply('Veuillez fournir au moins deux options pour le sondage.');
        return;
    }

    const newPoll = {
        id: (Math.random() * 1000000).toFixed(0), // Simple ID
        question,
        options,
        votes: {} // Stores userId: optionIndex
    };

    let polls = await readJsonFile(POLLS_FILE, []);
    polls.push(newPoll);
    await writeJsonFile(POLLS_FILE, polls);

    await ctx.reply(`Sondage cr√©√© avec succ√®s !\nID: ${newPoll.id}\nQuestion: ${newPoll.question}\nOptions: ${options.map(o => o.text).join(', ')}\nVotez avec /voter${newPoll.id} [num√©ro_option]`);
});


// Commande pour les p√©titions (redirige vers le site web)
bot.command('petition', async (ctx) => {
    await ctx.replyWithMarkdown(
        `‚û°Ô∏è **P√©titions en cours :**\n\nPour signer et soutenir nos p√©titions pour le RIC et la proc√©dure de destitution, veuillez visiter la section 'S'engager' sur notre site web :\n\n[P√©tition RIC](${BASE_WEB_APP_URL}/pages/ric.html)\n[P√©tition Destitution](${BASE_WEB_APP_URL}/pages/destitution-article68.html)\n\nVotre signature est essentielle pour la r√©ussite de nos actions !` // LIENS MIS √Ä JOUR
    );
});


// Commande /inviter
bot.command('inviter', async (ctx) => {
    const botUsername = ctx.botInfo.username; // Le nom d'utilisateur de votre bot
    const inviteLink = `https://t.me/${botUsername}?start=invite_${ctx.from.id}`; // Lien d'invitation avec un payload unique
    await ctx.replyWithMarkdown(
        `Partagez ce lien pour inviter vos amis √† rejoindre notre mouvement et le bot :\n\n\`${inviteLink}\`\n\nPlus nous sommes nombreux, plus notre voix porte !`
    );
});


// Commande /contact pour envoyer un message aux organisateurs
bot.command('contact', async (ctx) => {
    const messageContent = ctx.message.text.split(' ').slice(1).join(' ');
    if (!messageContent) {
        await ctx.reply('Veuillez fournir le message que vous souhaitez envoyer aux organisateurs. Exemple: /contact J\'ai une id√©e pour la gr√®ve.');
        return;
    }

    if (ORGANIZER_GROUP_ID) {
        try {
            await bot.telegram.sendMessage(ORGANIZER_GROUP_ID, `Nouveau message de l'utilisateur ${ctx.from.first_name} (${ctx.from.username || 'ID: ' + ctx.from.id}) :\n\n${messageContent}`);
            await ctx.reply('Votre message a √©t√© transmis aux organisateurs. Merci !');
        } catch (error) {
            console.error('Erreur lors de l\'envoi du message aux organisateurs:', error);
            await ctx.reply('D√©sol√©, je n\'ai pas pu transmettre votre message aux organisateurs. Veuillez r√©essayer plus tard.');
        }
    } else {
        await ctx.reply('Le canal de contact des organisateurs n\'est pas configur√©. Veuillez contacter l\'administrateur du bot.');
    }
});


// Garder la commande /stats
bot.command('stats', async (ctx) => {
    const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
    const statsMessage = `üìä Statistiques d'utilisation du bot :\nTotal de messages trait√©s : ${stats.totalMessages}`;
    await ctx.reply(statsMessage);
});


// Traitement des messages texte g√©n√©raux par l'IA (Groq)
bot.on('text', async (ctx) => {
    // Incr√©menter le compteur de messages pour chaque message texte re√ßu
    try {
        const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
        stats.totalMessages = (stats.totalMessages || 0) + 1;
        await writeJsonFile(STATS_FILE, stats);
    } catch (error) {
        console.error('Erreur lors de la mise √† jour du compteur de messages:', error);
    }

    if (ctx.message.text.startsWith('/')) {
        return; // Ne pas traiter les commandes comme des messages de conversation IA
    }
    await ctx.replyWithChatAction('typing');

    try {
        const userMessage = ctx.message.text;
        // Utilisation du r√¥le assistant pour le bot Telegram
        const aiResponse = await getGroqChatResponse(
            userMessage,
            'gemma2-9b-it', // Le mod√®le Groq que vous utilisez
            rolesAssistant.assistant.content // R√¥le Assistant pour Telegram
        );
        await ctx.reply(aiResponse);
    } catch (error) {
        console.error('√âchec de la g√©n√©ration de la r√©ponse IA (Telegram) avec gemma2-9b-it:', error);
        await ctx.reply('Une erreur est survenue lors du traitement de votre demande de conversation IA. Veuillez v√©rifier la configuration de l\'IA ou r√©essayer plus tard.');
    }
});


// --- Lancement des serveurs et du chatbot terminal ---

// Lance le serveur Express du bot
app.listen(BOT_SERVER_PORT, () => {
    console.log(`‚ú® ----------------------------------------------------------->`);
    console.log(`‚ú® Serveur API du bot Telegram running on http://localhost:${BOT_SERVER_PORT}`);
    console.log(`‚ú® Ce serveur Express est d√©di√© aux fonctions internes du bot (ex: stats, polls).`);
    console.log(`‚ú® Votre application web est maintenant accessible via : ${BASE_WEB_APP_URL}`); // MESSAGE MIS √Ä JOUR
    console.log(`‚ú® ----------------------------------------------------------->`);

    // Lancement du chatbot terminal juste apr√®s le d√©marrage du serveur Express
    startTerminalChatbot();

    // Lancement du bot Telegram
    if (process.env.TELEGRAM_BOT_TOKEN) {
        console.log('Tentative de lancement du bot Telegram...');
        bot.launch()
            .then(async () => {
                console.log('Telegram bot launched! ‚ú® Mouvement Citoyen 10 Septembre Bot.');
                console.log(`‚ú® ----------------------------------------------------------->`);
                // En option: Supprimer tout webhook existant pour s'assurer du polling
                await bot.telegram.deleteWebhook().catch(err => console.error('Erreur lors de la suppression du webhook pr√©c√©dent:', err));
                console.log('Webhook pr√©c√©dent, si existant, a √©t√© supprim√© pour assurer le polling.');
            })
            .catch(err => {
                console.error('\n[ERREUR FATALE] √âchec du lancement du bot Telegram:', err);
                console.warn('Veuillez v√©rifier attentivement votre TELEGRAM_BOT_TOKEN dans le fichier .env.');
                console.warn('Assurez-vous qu\'il est correct et qu\'il n\'y a pas d\'espace ou de caract√®res invisibles.');
                console.log(`‚ú® ----------------------------------------------------------->`);
            });
    } else {
        console.warn('TELEGRAM_BOT_TOKEN n\'est pas configur√© dans votre .env. Le bot Telegram ne sera pas lanc√©.');
        console.log(`‚ú® ----------------------------------------------------------->`);
    }

}).on('error', (err) => {
    if (err.code === 'EADDRINUSE') {
        console.error(`Erreur: Le port ${BOT_SERVER_PORT} est d√©j√† utilis√©.`);
        console.error('Veuillez lib√©rer le port (fermez les autres applications l\'utilisant) ou choisir un autre port (ex: 3002) dans votre fichier .env pour BOT_SERVER_PORT.');
    } else {
        console.error('Erreur inattendue lors du d√©marrage du serveur Express du bot:', err);
    }
    process.exit(1);
});

// Fonction pour le chatbot directement dans le terminal
async function startTerminalChatbot() {
    console.log('\n--- Chatbot Groq en mode Terminal (R√¥le Syst√®me) ---');
    console.log('Ce chatbot est propuls√© par Groq. Tapez vos messages et appuyez sur Entr√©e.');
    console.log('Pour quitter le chatbot et le serveur, appuyez sur Ctrl+C.');

    process.stdin.setEncoding('utf8');
    process.stdin.setRawMode(false); // Permet de lire l'entr√©e ligne par ligne
    process.stdin.resume(); // Commence √† lire l'entr√©e

    console.log('\nIA (Groq): (Initialisation de la conversation...)');
    try {
        const initialResponse = await getGroqChatResponse(
            "Bonjour, en tant qu'assistant pour un mouvement citoyen, pr√©sentez-vous et demandez comment vous pouvez aider √† mobiliser les citoyens.",
            'gemma2-9b-it',
            rolesSystem.system.content
        );
        console.log(`IA (Groq): ${initialResponse}`);
    } catch (error) {
        console.error('Erreur lors de l\'initialisation de la communication avec Groq (terminal):', error);
        console.log('IA (Groq): Impossible de d√©marrer la conversation. Veuillez v√©rifier votre cl√© API Groq et votre connexion internet.');
    }

    process.stdout.write('Vous: ');

    process.stdin.on('data', async (input) => {
        const message = input.trim();
        if (!message) {
            process.stdout.write('Veuillez taper un message. Vous: ');
            return;
        }
        console.log('IA (Groq): (R√©flexion...)');
        try {
            const aiResponse = await getGroqChatResponse(
                message,
                'gemma2-9b-it',
                rolesSystem.system.content
            );
            console.log(`IA (Groq): ${aiResponse}`);
        } catch (error) {
            console.error('Erreur lors de la communication avec Groq (terminal):', error);
            console.log('IA (Groq): D√©sol√©, une erreur est survenue lors du traitement de votre demande.');
        }
        process.stdout.write('Vous: ');
    });
}

// G√©rer l'arr√™t propre du bot et du serveur
process.once('SIGINT', () => {
    console.log('Arr√™t du bot et du serveur (SIGINT)');
    if (bot) bot.stop('SIGINT');
    process.exit(0);
});
process.once('SIGTERM', () => {
    console.log('Arr√™t du bot et du serveur (SIGTERM)');
    if (bot) bot.stop('SIGTERM');
    process.exit(0);
});